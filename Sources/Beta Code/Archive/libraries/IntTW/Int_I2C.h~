#ifndef INT_I2C_H
#define INT_I2C_H

//not circular !
//max three commands ( 3 * 2 )
//max receive 4 bytes
#define II2C_INT_COMMANDS_BUFFER_SIZE 6
#define II2C_INT_RX_BYTES_BUFFER_SIZE 4

//circular to buffer commands
#define II2C_COMMANDS_BUFFER_SIZE 32
#define II2C_RX_BYTES_BUFFER_SIZE 32

class CircularBuffer {

 public:
 CircularBuffer(uint8_t* buffer, uint8_t size) : buffer(buffer), size(size) { }
  
  bool write(uint8_t value);  // !! buffered !! Use writeDone  
  void writeDone(void); 
  bool available(void);
  uint8_t read(void);

 private:
  uint8_t* const buffer;
  const uint8_t size;
  uint8_t head;
  uint8_t tail;
  uint8_t writePos;

};


class IntTwoWire {

 public:
 IntTwoWire() : commands(commandsBuffer, II2C_COMMANDS_BUFFER_SIZE),
                rxBytes(rxBytesBuffer, II2C_RX_BYTES_BUFFER_SIZE) { }

  void begin(unsigned long clock = 100000UL);
  
  

 private:

  /* interrupt part */
  uint8_t intCommands[II2C_INT_COMMANDS_BUFFER_SIZE];
  uint8_t intRxBytes[II2C_INT_RX_BYTES_BUFFER_SIZE];
  

  
  uint8_t commandsBuffer[II2C_COMMANDS_BUFFER_SIZE];
  uint8_t receiveBytesBuffer[II2C_READ_BYTES_BUFFER_SIZE];
  CircularBuffer intCommands;
  CircularBuffer commands;
  CircularBuffer receiveBytes;
  
  
  


#endif //INT_I2C_H
